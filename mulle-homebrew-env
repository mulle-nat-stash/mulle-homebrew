#! /bin/sh
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#


usage()
{
   cat <<EOF >&2
Usage: mulle-homebrew-env [command]

   Prints the configuration of various mulle-homebrew related values.
   You can also use it to install a template of release.sh in your bin
   directory.

Commands:
   install [dir]    : install a release.sh template, usually in your ./bin
   libexec-path     : print path to support scripts (default)
   share-path       : print path to resources
   template-path    : print path to release.sh template
   version          : print version of installed scripts
   path             : path of the executable

EOF
   exit 1
}


fail()
{
   echo "Error:" "$*" >&2
   exit 1
}


camelcase()
{
   local string="$1"

   # convert crap into _
   string="$(tr -C '[:alnum:]' '_' <<< "${string}")"

   # remove duplicate __
   string="$(sed 's/__/_/g' <<< "${string}")"

   # remove leading and trailing _
   string="$(sed 's/^_//g' <<< "${string}")"
   string="$(sed 's/_$//g' <<< "${string}")"

   # turn _[a-z] into uppercase
   local  component
   local  remainder

   remainder="${string}"
   while [ ! -z "${remainder}" ]
   do
      component="$(cut -d_ -f1 <<< "${remainder}")"
      remainder="$(cut -s -d_ -f2- <<< "${remainder}")"

      # uppercase
      component="$(tr '[:lower:]' '[:upper:]' <<< "${component:0:1}")${component:1}"

      printf "%s" "${component}"
   done

   printf "\n"
}


libexec_path()
{
   if [ ! -f mulle-homebrew.sh ]
   then
      [ ! -d "../libexec" ] && fail "libexec not found"
      [ ! -d "../libexec/mulle-homebrew" ] && fail "libexec/mulle-homebrew is missing"

      cd ../libexec/mulle-homebrew || exit 1
   fi

   pwd -P
}


share_path()
{
   if [ ! -f release.sh.template ]
   then
      [ ! -d "../share" ] && fail "share not found"
      [ ! -d "../share/mulle-homebrew" ] && fail "share/mulle-homebrew is missing"

      cd ../share/mulle-homebrew || exit 1
   fi

   pwd -P
}


template_path()
{
   share_path > /dev/null || exit 1

   [ ! -f "release.sh.template" ] && fail "release.sh.template is missing"

   echo "`pwd -P`/release.sh.template"
}


version()
{
   local filename

   filename="`template_path`"
   egrep -s "^MULLE_HOMEBREW_VERSION=" "${filename}" | cut -d= -f2 | tr -d '"'
}


projectdir="`pwd -P`"

path="`dirname -- "$0"`"
cd "${path}" || exit 1


# the option prefix is kinda historic now

case "$1" in
   "--help"|"-h"|"help")
      usage
   ;;

   "libexec-path"|"")
      libexec_path
   ;;

   "share-path")
      share_path
   ;;

   "template-path")
      template_path
   ;;

   "--version"|"version")
      version
   ;;

   "install-template"|"install")
      shift
      directory="${1:-bin}"
      case "${directory}" in
         /*)
            # absolute ? keep as is
         ;;

         *)
            directory="${projectdir}/${directory}"
         ;;
      esac

      if [ ! -d "${directory}" ]
      then
         mkdir "${directory}" || exit 1
      fi

      name="`basename -- "${projectdir}"`"
      name="`camelcase "${name}"`"

      # try to avoid creating empty release.sh if things go awry
      template="`template_path`"
      result="`sed "s/^PROJECT=\\\"MyProject\\\"/PROJECT=\\\"${name}\\\"/" "${template}"`" || exit 1
      [ -z "${result}" ] && fail "release.sh generation failed"

      echo "${result}" > "${directory}/release.sh"
      chmod 755 "${directory}/release.sh"
   ;;

   -*)
      fail "unknown option \"$1\""
   ;;

   path)
      echo "`pwd -P`/`basename -- "$0"`"
   ;;

   *)
      usage
   ;;
esac

