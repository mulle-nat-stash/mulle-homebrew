#! /bin/sh
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#


usage()
{
   cat <<EOF >&2
Usage: mulle-homebrew-env [command]

   Prints the configuration of various mulle-homebrew related values.
   You can also use it to install a template of release.sh in your bin
   directory.

Commands:
   install [dir]    : install a release.sh template, usually in your ./bin
   libexec-path     : print path to support scripts (default)
   share-path       : print path to resources
   template-path    : print path to release.sh template
   version          : print version of installed scripts
   path             : path of the executable

EOF
   exit 1
}


fail()
{
   echo "Error:" "$*" >&2
   exit 1
}


camelcase()
{
   local string="$1"

   # convert crap into _
   string="$(tr -C '[:alnum:]' '_' <<< "${string}")"

   # remove duplicate __
   string="$(sed 's/__/_/g' <<< "${string}")"

   # remove leading and trailing _
   string="$(sed 's/^_//g' <<< "${string}")"
   string="$(sed 's/_$//g' <<< "${string}")"

   # turn _[a-z] into uppercase
   local  component
   local  remainder

   remainder="${string}"
   while [ ! -z "${remainder}" ]
   do
      component="$(cut -d_ -f1 <<< "${remainder}")"
      remainder="$(cut -s -d_ -f2- <<< "${remainder}")"

      # uppercase
      component="$(tr '[:lower:]' '[:upper:]' <<< "${component:0:1}")${component:1}"

      printf "%s" "${component}"
   done

   printf "\n"
}


libexec_path()
{
   [ ! -d "${libexecpath}" ] && fail "libexec folder \"${libexecpath}\" missing"

   cd "${libexecpath}" || exit 1
   pwd -P
}


share_path()
{
   [ ! -d "${sharepath}" ] && fail "share folder \"${sharepath}\" missing"

   cd "${sharepath}" || exit 1
   pwd -P
}



template_path()
{
   [ ! -f "${sharepath}/release.sh.template" ] && fail "template \""${sharepath}/release.sh.template"\" missing"

   cd "${sharepath}" || exit 1
   echo "`pwd -P`/release.sh.template"
}


version()
{
   local filename

   filename="`template_path`"
   egrep -s "^MULLE_HOMEBREW_VERSION=" "${filename}" | cut -d= -f2 | tr -d '"'
}


#
# stolen from:
# http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
# ----
#
_prepend_path_if_relative()
{
   case "$2" in
      /*)
         echo "$2"
         ;;
      *)
         echo "$1/$2"
         ;;
   esac
}


resolve_symlinks()
{
   local dir_context
   local linkpath

   if linkpath="`readlink "$1"`"
   then
      dir_context=`dirname -- "$1"`
      resolve_symlinks "`_prepend_path_if_relative "${dir_context}" "${linkpath}"`"
   else
      echo "$1"
   fi
}


projectdir="`pwd -P`"

# resolve symlinks if there
executable="`resolve_symlinks "$0"`"
exedirpath="`dirname "${executable}"`"
prefix="`dirname "${exedirpath}"`"

# allow local execution from project
if [ -e "${exedirpath}/mulle-homebrew.sh" -a -e "${exedirpath}/release.sh.template" ]
then
   libexecpath="${exedirpath}"
   sharepath="${exedirpath}"
else
   libexecpath="${prefix}/libexec/mulle-homebrew"
   sharepath="${prefix}/share/mulle-homebrew"
fi



# the option prefix is kinda historic now

case "$1" in
   "--help"|"-h"|"help")
      usage
   ;;

   "libexec-path"|"")
      libexec_path
   ;;

   "share-path")
      share_path
   ;;

   "template-path")
      template_path
   ;;

   "--version"|"version")
      version
   ;;

   "install-template"|"install")
      shift
      directory="${1:-bin}"
      case "${directory}" in
         /*)
            # absolute ? keep as is
         ;;

         *)
            directory="${projectdir}/${directory}"
         ;;
      esac

      if [ ! -d "${directory}" ]
      then
         mkdir "${directory}" || exit 1
      fi

      name="`basename -- "${projectdir}"`"
      name="`camelcase "${name}"`"

      # try to avoid creating empty release.sh if things go awry
      template="`template_path`"
      result="`sed "s/^PROJECT=\\\"MyProject\\\"/PROJECT=\\\"${name}\\\"/" "${template}"`" || exit 1
      [ -z "${result}" ] && fail "release.sh generation failed"

      if [ -f "${projectdir}/CMakeLists.txt" ]
      then
         result="`sed "s/^' *# cmake would be useful.*$/cmake'/" <<< "${result}"`" || exit 1
      fi

      echo "${result}" > "${directory}/release.sh"
      chmod 755 "${directory}/release.sh"
   ;;

   -*)
      fail "unknown option \"$1\""
   ;;

   path)
      echo "${executable}"
   ;;

   *)
      usage
   ;;
esac

